#! /usr/bin/env lua

---------------------------------------------------------------------------

local base64_encoder = {
  [62] = "-";
  [63] = "_";
}

local n = ("A"):byte()
for i = 0, 25 do
  base64_encoder[i] = string.char(n + i)
end

local n = ("a"):byte() - 26
for i = 26, 51 do
  base64_encoder[i] = string.char(n + i)
end

local n = ("0"):byte() - 52
for i = 52, 61 do
  base64_encoder[i] = string.char(n + i)
end

local base64_decoder = {}

for i = 0, 63 do
  base64_decoder[base64_encoder[i]:byte()] = i
end

local function encode_base64_url(source)
  local result = {}
  for i = 1, #source, 3 do
    local a, b, c = source:byte(i, i + 2)
    local n = #result
    if c then
      local v = a << 16 | b << 8 | c
      result[#result + 1] = base64_encoder[v >> 18]..base64_encoder[v >> 12 & 0x3F]..base64_encoder[v >> 6 & 0x3F]..base64_encoder[v & 0x3F]
    elseif b then
      local v = a << 10 | b << 2
      result[#result + 1] = base64_encoder[v >> 12]..base64_encoder[v >> 6 & 0x3F]..base64_encoder[v & 0x3F]
    else
      local v = a << 4
      result[#result + 1] = base64_encoder[v >> 6]..base64_encoder[v & 0x3F]
    end
  end
  return table.concat(result)
end

local function decode_base64_url(source)
  local result = {}
  for i = 1, #source, 4 do
    local a, b, c, d = source:byte(i, i + 3)
    if d then
      local v = base64_decoder[a] << 18 | base64_decoder[b] << 12 | base64_decoder[c] << 6 | base64_decoder[d]
      result[#result + 1] = string.char(v >> 16, v >> 8 & 0xFF, v & 0xFF)
    elseif c then
      local v = base64_decoder[a] << 10 | base64_decoder[b] << 4 | base64_decoder[c] >> 2
      result[#result + 1] = string.char(v >> 8, v & 0xFF)
    else
      local v = base64_decoder[a] << 2 | base64_decoder[b] >> 4
      result[#result + 1] = string.char(v)
    end
  end
  return table.concat(result)
end

---------------------------------------------------------------------------

local function encode_hex(source)
  local result = {}
  for i = 1, #source do
    result[i] = ("%02X"):format(source:byte(i))
  end
  return table.concat(result)
end

local function random(n)
  local handle <close> = assert(io.open("/dev/urandom"))
  return handle:read(n)
end

---------------------------------------------------------------------------

local auto_remover_metatable = {}

function auto_remover_metatable:__close()
  os.remove(self.filename)
end

local function auto_remove(filename)
  return setmetatable({ filename = filename }, auto_remover_metatable)
end

---------------------------------------------------------------------------

local tmp <close> = auto_remove(os.tmpname())

local function quote(source)
  return [[']]..source:gsub([[']], [['\'']])..[[']]
end

local function generate_private_key()
  local command = "openssl ecparam -genkey -name prime256v1 -noout"
  local handle <close> = assert(io.popen(command))
  return handle:read "*a"
end

local function get_public_key(private_key)
  do
    local command = ("openssl ec -pubout >%s 2>/dev/null"):format(quote(tmp.filename))
    local handle <close> = assert(io.popen(command, "w"))
    handle:write(private_key)
  end
  local handle <close> = assert(io.open(tmp.filename))
  return handle:read "*a"
end

local function export_public_key(public_key)
  do
    local command = ("openssl pkey -pubin -outform DER >%s"):format(quote(tmp.filename))
    local handle <close> = assert(io.popen(command, "w"))
    handle:write(public_key)
  end
  local handle <close> = assert(io.open(tmp.filename))
  local data = handle:read "*a"
  return encode_base64_url(data:sub(-65))
end

local function import_public_key(public_key)
  local data
  do
    local command = "openssl ecparam -genkey -name prime256v1 -noout | openssl ec -pubout -outform DER 2>/dev/null"
    local handle <close> = assert(io.popen(command))
    data = handle:read "*a"
  end
  do
    local command = ("openssl pkey -pubin -inform DER >%s"):format(quote(tmp.filename))
    local handle <close> = assert(io.popen(command, "w"))
    handle:write(data:sub(1, -66), decode_base64_url(public_key))
  end
  local handle <close> = assert(io.open(tmp.filename))
  return handle:read "*a"
end

local function ecdh(private_key, public_key)
  do
    local handle <close> = assert(io.open(tmp.filename, "w"))
    handle:write(public_key)
  end
  local out <close> = auto_remove(os.tmpname())
  local command = ("openssl pkeyutl -derive -inkey /dev/stdin -peerkey %s >%s"):format(quote(tmp.filename), quote(out.filename))
  do
    local handle <close> = assert(io.popen(command, "w"))
    handle:write(private_key)
  end
  local handle <close> = assert(io.open(out.filename))
  return handle:read "*a"
end

local function hmac_sha_256(key, message)
  do
    local command = ("openssl dgst -sha256 -mac HMAC -macopt hexkey:%s -binary >%s"):format(encode_hex(key), quote(tmp.filename))
    local handle <close> = assert(io.popen(command, "w"))
    handle:write(message)
  end
  local handle <close> = assert(io.open(tmp.filename))
  return handle:read "*a"
end

local function aes_128_gcm(key, iv, message)
  do
    local command = ("../src/aes128gcm %s %s >%s"):format(encode_hex(key), encode_hex(iv), quote(tmp.filename))
    local handle <close> = assert(io.popen(command, "w"))
    handle:write(message)
  end
  local handle <close> = assert(io.open(tmp.filename))
  return handle:read "*a"
end

--[[
{
  "endpoint": "https://web.push.apple.com/QMBl9kim_dOohaRq5s71jjViZGsUPOCqQMySIPgVyP6OO9d2Ia8sSwkrdXQJshfZAv2O2M0iZtmD9T_tD7h94BGuKL2KHBL6ueg6ZbRVpxoM9pZ8eQfzwsOtGa7D93OnOhCxfzSIwfXN55nWyJOALL_Ep3QnbXMPKJp6A-MmqoY",
  "keys":{
    "p256dh": "BAZB7frNVJbrvwDiDyrgaHlDwxIzkSIwp1zuGtInMkoLEE5rTR0zd6dhT7u0JesMJ4sc0hP3WsuPsqszwuwbY_U",
    "auth": "n_YcnODVI5XEBPTITOlalg"
  }
}
]]

--[====[

local endpoint = "https://web.push.apple.com/QMBl9kim_dOohaRq5s71jjViZGsUPOCqQMySIPgVyP6OO9d2Ia8sSwkrdXQJshfZAv2O2M0iZtmD9T_tD7h94BGuKL2KHBL6ueg6ZbRVpxoM9pZ8eQfzwsOtGa7D93OnOhCxfzSIwfXN55nWyJOALL_Ep3QnbXMPKJp6A-MmqoY"
local p256dh = "BAZB7frNVJbrvwDiDyrgaHlDwxIzkSIwp1zuGtInMkoLEE5rTR0zd6dhT7u0JesMJ4sc0hP3WsuPsqszwuwbY_U"
local auth = "n_YcnODVI5XEBPTITOlalg"


local ecdh_secret = nil
local auth_secret = decode_base64_url(auth)
local salt = random(16)

local private_key = generate_private_key()
io.write(private_key)
local public_key = get_public_key(private_key)
io.write(public_key)
io.write(export_public_key(public_key), "\n")

local ua_public = import_public_key(p256dh)
io.write(ua_public)

local key = ecdh(private_key, ua_public)
print(encode_base64_url(key))

local test = hmac_sha_256(key, "test")
print(encode_base64_url(test))

]====]

-- RFC 8291
local plain_text = decode_base64_url "V2hlbiBJIGdyb3cgdXAsIEkgd2FudCB0byBiZSBhIHdhdGVybWVsb24"
local as_public = decode_base64_url "BP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27mlmlMoZIIgDll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A8"
local ua_public = decode_base64_url "BCVxsr7N_eNgVRqvHtD0zTZsEc6-VV-JvLexhqUzORcxaOzi6-AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4"

local ecdh_secret = decode_base64_url "kyrL1jIIOHEzg3sM2ZWRHDRB62YACZhhSlknJ672kSs"
local auth_secret = decode_base64_url "BTBZMqHH6r4Tts7J_aSIgg"
local salt = decode_base64_url "DGv6ra1nlYgDCS1FRnbzlw"

local prk_key = hmac_sha_256(auth_secret, ecdh_secret)
print(#prk_key)
print(encode_base64_url(prk_key))
local key_info = "WebPush: info\0"..ua_public..as_public
-- print(encode_base64_url(key_info) == "V2ViUHVzaDogaW5mbwAEJXGyvs3942BVGq8e0PTNNmwRzr5VX4m8t7GGpTM5FzFo7OLr4BhZe9MEebhuPI-OztV3ylkYfpJGmQ22ggCLDgT-M_SrDepxkU21WCP3O1SUj0EwbZIHMtu5pZpTKGSCIA5Zent7wmC6HCJ5mFgJkuk5cwAvMBKiiujwa7t45ewP")
local ikm = hmac_sha_256(prk_key, key_info.."\1")
print(encode_base64_url(ikm))
local prk = hmac_sha_256(salt, ikm)
print(encode_base64_url(prk))
local cek_info = "Content-Encoding: aes128gcm\0"
local cek = hmac_sha_256(prk, cek_info.."\1"):sub(1, 16)
print(encode_base64_url(cek))
local nonce_info = "Content-Encoding: nonce\0"
local nonce = hmac_sha_256(prk, nonce_info.."\1"):sub(1, 12)
print(encode_base64_url(nonce))

local record_size = 4096
local rs = (">I4"):pack(record_size)

local header = salt..rs..string.char(#as_public)..as_public
print(encode_base64_url(header))
print(#header)

local cipher_text = aes_128_gcm(cek, nonce, plain_text.."\2")
print(encode_base64_url(cipher_text))
